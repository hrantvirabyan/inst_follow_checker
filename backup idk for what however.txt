const username = "USER_NAME_HERE";

/**
 * Initialized like this so TypeScript can infer the type
 */
let followers = [];
let followings = [];
let dontFollowMeBack = [];
let iDontFollowBack = [];

(async () => {
  try {
    const userQueryRes = await fetch(
      `https://www.instagram.com/web/search/topsearch/?query=${username}`
    );

    const userQueryJson = await userQueryRes.json();

    const userId = userQueryJson.users[0].user.pk;

    let after = null;
    let has_next = true;

    while (has_next) {
      await fetch(
        `https://www.instagram.com/graphql/query/?query_hash=c76146de99bb02f6415203be841dd25a&variables=` +
          encodeURIComponent(
            JSON.stringify({
              id: userId,
              include_reel: true,
              fetch_mutual: true,
              first: 50,
              after: after,
            })
          )
      )
        .then((res) => res.json())
        .then((res) => {
          has_next = res.data.user.edge_followed_by.page_info.has_next_page;
          after = res.data.user.edge_followed_by.page_info.end_cursor;
          followers = followers.concat(
            res.data.user.edge_followed_by.edges.map(({ node }) => {
              return {
                username: node.username,
                full_name: node.full_name,
              };
            })
          );
        });
    }

    after = null;
    has_next = true;

    while (has_next) {
      await fetch(
        `https://www.instagram.com/graphql/query/?query_hash=d04b0a864b4b54837c0d870b0e77e076&variables=` +
          encodeURIComponent(
            JSON.stringify({
              id: userId,
              include_reel: true,
              fetch_mutual: true,
              first: 50,
              after: after,
            })
          )
      )
        .then((res) => res.json())
        .then((res) => {
          has_next = res.data.user.edge_follow.page_info.has_next_page;
          after = res.data.user.edge_follow.page_info.end_cursor;
          followings = followings.concat(
            res.data.user.edge_follow.edges.map(({ node }) => {
              return {
                username: node.username,
                full_name: node.full_name,
              };
            })
          );
        });
    }

    dontFollowMeBack = followings.filter((following) => {
      return !followers.find(
        (follower) => follower.username === following.username
      );
    });

    console.log("People who don't follow you back:");
    console.table(dontFollowMeBack);

    const userListText = dontFollowMeBack
      .map(({ username, full_name }) => `${username} - ${full_name}`)
      .join("\n");

    const newTab = window.open();
    if (newTab) {
      newTab.document.open();
      newTab.document.write(
        `<html><body><table>${dontFollowMeBack
          .map(
            ({ username, full_name }) =>
              `<tr><td>${username}</td><td>${full_name}</td></tr>`
          )
          .join("")}</table></body></html>`
      );
      newTab.document.close();
    } else {
      console.log(
        "Unable to open a new tab. Please allow pop-ups and try again."
      );
    }
  } catch (err) {
    console.log({ err });
  }
})();
